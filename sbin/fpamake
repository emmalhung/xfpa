#!/bin/bash

# Set up the FPA environment
. .fpaenvrc

if [ "$1" = "-" ]
then
	shift
	cd $FPA
fi

# Default - no crash on read at zero
case $PLATFORM in
	hp*)	CrashMode=-Z
			;;
	*)		CrashMode=
			;;
esac
if [ "$1" = "+" ]
then
	# Force crash on read at zero
	CrashMode=-z
	shift
fi

# Determine the platform
export PLATFORM;	PLATFORM=`$FPA/bin/platform`
echo "FPA Makefile Utility"						2>&1 | tee    log.$PLATFORM
echo "  Working Directory: `pwd`"				2>&1 | tee -a log.$PLATFORM
echo "  Target Platform:   $PLATFORM"			2>&1 | tee -a log.$PLATFORM
echo "  Log File:          `pwd`/log.$PLATFORM"	2>&1 | tee -a log.$PLATFORM
case $CrashMode in
	-z)	echo "  Null Protection:   Disabled";;
	-Z)	echo "  Null Protection:   Enabled";;
esac
echo

MAKEFILE=Makefile.fpa
if [ ! -r $MAKEFILE ]
then
	echo "Cannot access $MAKEFILE"				2>&1 | tee -a log.$PLATFORM
	exit 1
fi

# Set up the platform-specific environment
case $PLATFORM in


	# LINUX on a 64 bit PC:
	pcLinux64*)

		echo ">>> options: FPA_32_BIT          = ${FPA_32_BIT:-off}"			2>&1 | tee -a log.$PLATFORM
		echo ">>>          FPA_OPTIMIZE        = ${FPA_OPTIMIZE:-off}"			2>&1 | tee -a log.$PLATFORM
		echo ">>>          FPA_NOT_DEVELOPMENT = ${FPA_NOT_DEVELOPMENT:-off}"	2>&1 | tee -a log.$PLATFORM
		echo " "

		# Use 32 Bit Compile (if FPA_32_BIT is set)
		if [ $FPA_32_BIT ]
		then
			echo ">>> 32 Bit Compile"	2>&1 | tee -a log.$PLATFORM
			if [ $FPA_NOT_DEVELOPMENT ]
			then
				COMPILE_OPT="-m32"
			else
				COMPILE_OPT="-m32 -DFPA_DEVELOPMENT"
			fi
			MAKE="/usr/bin/make -f Makefile.fpa"
			LIBPNG="png"
			GRIBPNGHOME="/usr"
			GRIBLIBPNG="png"
			GRIB2HOME=""
			SHLIB_EXT=so
			C_COMPILER="/usr/bin/gcc $COMPILE_OPT -ansi -DMACHINE_PCLINUX"
			C_COMPLOAD="${C_COMPILER} -Wl,-Bdynamic"
			C_COMP_SHARED="${C_COMPILER} -fPIC"
			if [ $FPA_OPTIMIZE ]
			then
				C_OPTIONS="${FPA_DEBUG:+'-g'} -O3 -funroll-loops -D_POSIX_C_SOURCE"
			else
				C_OPTIONS="${FPA_DEBUG:+'-g'} -D_POSIX_C_SOURCE"
			fi
			F77_COMPILER="/usr/bin/gfortran $COMPILE_OPT -DMACHINE_PCLINUX"
			F77_COMPLOAD="${F77_COMPILER} -Wl,-Bdynamic"
			FTN_COMPILER="/usr/bin/gfortran $COMPILE_OPT -DMACHINE_PCLINUX"
			FTN_COMPLOAD="${FTN_COMPILER} -Wl,-Bdynamic"
			FTN_COMP_SHARED="${FTN_COMPILER} -fPIC"
			LEX="/usr/bin/flex"
			LIB_ARCHIVE="/usr/bin/ar cr"
			LIB_ORDER="/bin/echo"
			LIB_SORT="/usr/bin/sed 's///'"
			LIB_SHARED="/usr/bin/gcc $COMPILE_OPT -shared"
			LIB_NAMES="/usr/bin/nm"
			LOADER="/usr/bin/gcc $COMPILE_OPT"
			MOTIF_LIB="/usr/lib"
			GRIB2LIB="${PLATFORM}/libgrib2c.a"
			JASPERLIB="${PLATFORM}/libjasper.a"
			LIB_PATH=""
			X_LIBS="-DX_LOCALE -lXext -lXm -lXt -lX11"
			INCLUDE_PATH="-D_BSD_SOURCE -D_SVID_SOURCE -D__USE_POSIX -D__USE_BSD"
			X_INCLUDE="-I${MOTIF_LIB}/include"
			FT2_INCLUDE="-I/usr/include/freetype2"
			EXTRA_FTN_LIBS=
			EXTRA_LIBS="-ltiff -lpng -lm"

		# Default is 64 Bit Compile
		else
			echo ">>> 64 Bit Compile"	2>&1 | tee -a log.$PLATFORM
			if [ $FPA_NOT_DEVELOPMENT ]
			then
				COMPILE_OPT=""
			else
				COMPILE_OPT="-DFPA_DEVELOPMENT"
			fi
			MAKE="/usr/bin/make -f Makefile.fpa"
			LIBPNG="png"
			GRIBPNGHOME="/usr"
			GRIBLIBPNG="png"
			if [ ${PLATFORM} == "pcLinux64vRedHat" ]; then
				GRIB2HOME="/usr/lib64"
			else
				GRIB2HOME="/usr/lib/x86_64-linux-gnu"
			fi
			SHLIB_EXT=so
			C_COMPILER="/usr/bin/gcc $COMPILE_OPT -ansi -DMACHINE_PCLINUX"
			C_COMPLOAD="${C_COMPILER} -Wl,-Bdynamic"
			C_COMP_SHARED="${C_COMPILER} -fPIC"
			if [ $FPA_OPTIMIZE ]
			then
				C_OPTIONS="${FPA_DEBUG:+'-g'} -O3 -funroll-loops -D_POSIX_C_SOURCE"
			else
				C_OPTIONS="${FPA_DEBUG:+'-g'} -D_POSIX_C_SOURCE"
			fi
			F77_COMPILER="/usr/bin/gfortran $COMPILE_OPT -DMACHINE_PCLINUX"
			F77_COMPLOAD="${F77_COMPILER} -Wl,-Bdynamic"
			FTN_COMPILER="/usr/bin/gfortran $COMPILE_OPT -DMACHINE_PCLINUX"
			FTN_COMPLOAD="${FTN_COMPILER} -Wl,-Bdynamic"
			FTN_COMP_SHARED="${FTN_COMPILER} -fPIC"
			LEX="/usr/bin/flex"
			LIB_ARCHIVE="/usr/bin/ar cr"
			LIB_ORDER="/bin/echo"
			LIB_SORT="/usr/bin/sed 's///'"
			LIB_SHARED="/usr/bin/gcc $COMPILE_OPT -shared"
			LIB_NAMES="/usr/bin/nm"
			LOADER="/usr/bin/gcc $COMPILE_OPT"
			MOTIF_LIB="/usr/lib64"
			if [ ${PLATFORM} == "pcLinux64vRedHat" ]; then
				GRIB2LIB="${GRIB2HOME}/libgrib2c.a"
				JASPERLIB="${GRIB2HOME}/libjasper.${SHLIB_EXT}"
			else
				GRIB2LIB="${GRIB2HOME}/libgrib2c.${SHLIB_EXT}"
				JASPERLIB="${GRIB2HOME}/libjasper.${SHLIB_EXT}"
			fi
			LIB_PATH=""
			X_LIBS="-DX_LOCALE -lXext -lXm -lXt -lX11 -lfontconfig -lXft"
			INCLUDE_PATH="-D_BSD_SOURCE -D_SVID_SOURCE -D__USE_POSIX -D__USE_BSD"
			X_INCLUDE="-I${MOTIF_LIB}/include"
			FT2_INCLUDE="-I/usr/include/freetype2"
			EXTRA_FTN_LIBS=
			EXTRA_LIBS="-ltiff -lpng -lm"
		fi
		;;


	# LINUX on a PC:
	pcLinux*)
		echo ">>> options: FPA_OPTIMIZE        = ${FPA_OPTIMIZE:-off}"			2>&1 | tee -a log.$PLATFORM
		echo ">>>          FPA_NOT_DEVELOPMENT = ${FPA_NOT_DEVELOPMENT:-off}"	2>&1 | tee -a log.$PLATFORM
		echo " "
		echo ">>> 32 Bit Compile"	2>&1 | tee -a log.$PLATFORM
		if [ $FPA_NOT_DEVELOPMENT ]
		then
			COMPILE_OPT="-m32"
		else
			COMPILE_OPT="-m32 -DFPA_DEVELOPMENT"
		fi
		MAKE="/usr/bin/make -f Makefile.fpa"
		LIBPNG="png"
		GRIBPNGHOME="/usr"
		GRIBLIBPNG="png"
		GRIB2HOME=""
		SHLIB_EXT=so
		C_COMPILER="/usr/bin/gcc $COMPILE_OPT -ansi -DMACHINE_PCLINUX -DOLD_PCLINUX"
		C_COMPLOAD="${C_COMPILER} -Wl,-Bdynamic"
		C_COMP_SHARED="${C_COMPILER} -fPIC"
		if [ $FPA_OPTIMIZE ]
		then
			C_OPTIONS="${FPA_DEBUG:+'-g'} -O3 -funroll-loops -D_POSIX_C_SOURCE"
		else
			C_OPTIONS="${FPA_DEBUG:+'-g'} -D_POSIX_C_SOURCE"
		fi
		F77_COMPILER="/usr/bin/gfortran -DMACHINE_PCLINUX"
		F77_COMPLOAD="${F77_COMPILER} -Wl,-Bdynamic"
		FTN_COMPILER="/usr/bin/gfortran -DMACHINE_PCLINUX"
		FTN_COMPLOAD="${FTN_COMPILER} -Wl,-Bdynamic"
		FTN_COMP_SHARED="${FTN_COMPILER} -fPIC"
		LEX="/usr/bin/flex"
		LIB_ARCHIVE="/usr/bin/ar cr"
		LIB_ORDER="/bin/echo"
		LIB_SORT="/usr/bin/sed 's///'"
		LIB_SHARED="/usr/bin/gcc $COMPILE_OPT -shared"
		LIB_NAMES="/usr/bin/nm"
		LOADER="/usr/bin/gcc $COMPILE_OPT"
		MOTIF_LIB="/usr/lib"
		GRIB2LIB="${PLATFORM}/libgrib2c.a"
		JASPERLIB="${PLATFORM}/libjasper.a"
		LIB_PATH=""
		X_LIBS="-DX_LOCALE -lXext -lXm -lXt -lX11"
		INCLUDE_PATH="-D_BSD_SOURCE -D_SVID_SOURCE -D__USE_POSIX -D__USE_BSD"
		X_INCLUDE="-I${MOTIF_LIB}/include"
		FT2_INCLUDE="-I/usr/include/freetype2"
		EXTRA_FTN_LIBS=
		EXTRA_LIBS="-ltiff -lpng -lm"
		;;


	# Unknown:
	*)		echo "Target Platform is Unknown"		2>&1 | tee -a log.$PLATFORM
			exit 1
			;;
esac
export MAKE
export LIBPNG
export GRIBPNGHOME GRIBLIBPNG
export SHLIB_EXT
export C_COMPILER C_COMPLOAD C_COMP_SHARED C_OPTIONS
#export F77_COMPILER F77_COMPLOAD
export FTN_COMPILER FTN_COMPLOAD FTN_COMP_SHARED
export LEX
export LIB_ARCHIVE LIB_ORDER LIB_SORT LIB_SHARED LIB_NAMES
export LOADER
export LIB_PATH X_LIBS INCLUDE_PATH X_INCLUDE FT2_INCLUDE EXTRA_FTN_LIBS EXTRA_LIBS
export MOTIF_LIB GRIB2LIB JASPERLIB FREETYPE2DIR

# Set up non-platform-specific environment
export BINDIR;		BINDIR=$FPA/bin
export SBINDIR;		SBINDIR=$FPA/sbin
export LIBDIR;		LIBDIR=$FPA/lib
export ULIBDIR;		ULIBDIR=$FPA/lib
export SLIBDIR;		SLIBDIR=$FPA/slib
export INCDIR;		INCDIR=$LIBDIR/include
export SINCDIR;		SINCDIR=$SLIBDIR/include
export APPDIR;		APPDIR=$FPA/app
export SAPPDIR;		SAPPDIR=$FPA/sapp
export FPAHDR;		FPAHDR=$INCDIR/fpa.h
export TYPES;		TYPES=$INCDIR/fpa_types.h
export MACROS;		MACROS=$INCDIR/fpa_macros.h
export GETMEM;		GETMEM=$INCDIR/fpa_getmem.h
export MATH;		MATH=$INCDIR/fpa_math.h
export STRING;		STRING=$INCDIR/fpa_string.h
export TOOLS;		TOOLS=$LIBDIR/tools/tools.h
export OBJECTS;		OBJECTS=$LIBDIR/objects/objects.h
export ENVIRON;		ENVIRON=$LIBDIR/environ/environ.h
export EXTRACT;		EXTRACT=$LIBDIR/extract/extract.h
export SUPPORT;		SUPPORT=$LIBDIR/supportlib/support.h
export FPAARLIB;	FPAARLIB=$LIBDIR/$PLATFORM/libfpa.a
export FPASHLIB;	FPASHLIB=$LIBDIR/$PLATFORM/libfpa.$SHLIB_EXT
export FPALIB;		FPALIB=$FPASHLIB
export FORTLIB;		FORTLIB=$LIBDIR/$PLATFORM/libfpafort.$SHLIB_EXT
export SUPLIB;		SUPLIB=$LIBDIR/$PLATFORM/libfpasup.$SHLIB_EXT
export USRLIB;		USRLIB=$ULIBDIR/$PLATFORM/libfpauser.$SHLIB_EXT
export ZLIB;		ZLIB=$ULIBDIR/$PLATFORM/libzero.$SHLIB_EXT

eval "$MAKE $*" 2>&1 | tee -a log.$PLATFORM
