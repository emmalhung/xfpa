################################################################################
#
#  FPA Image Config File
#
#  Notes:
#    1. Any line starting with a '#' character in this file is taken as a
#       comment.
#    2. Any tag or item that has embedded spaces MUST be enclosed in quotes
#       for proper parsing. For example: "1.5 Km CAPPI"
#
#  OVERVIEW
#
#  The file contains two types of information blocks for products and
#  images. The format of these blocks is:
#
#     block_key block_tag
#     {
#        information
#        ...
#     }
#
#  The two block_keys are "product" and "image". The block_tag is whatever
#  you want that will make the file easy to read. Images are grouped into
#  products. Thus the product blocks stand on their own, but an image block
#  must belong to a product block.
#
#
#  PRODUCT BLOCK
#
#  A product is a group of images to which certain attributes apply.
#  The product is identified by a "product_tag" which is then referred
#  to in the image entry block.
#
#  Format:
#
#  product <product_tag>
#  {
#     key_word = <item list>
#     key_word = <item list>
#     ...
#  }
#
#  Key words are:
#
#      label  - The product label as seen by the end user
#
#      class  - The type of image the group is for. Either "radar" or
#               "satellite"
#
#      ctable - Location of a colour look up table file to be applied to
#               images in product group. There can be more than one of
#               these and are expected to be selectable by the user. Each
#               entry is in the form of:
#
#                  ctable = label directory_key file_name <default>
#
#                  where: label         - label to give to the look up table
#                         directory_key - directory key from setup file
#                         file_name     - name of file to read
#                         default       - optional. If specified the given
#                                         ctable is set as the default.
#
#           Notes: 1. Look up tables come in two forms, those which assign a
#                     particular pixel value to a colour and those which are
#                     used with data files to assign a range of values
#                     (reflectivity, cloud top temperature, etc) to a colour.
#
#                  2. If there is no lut entry in the product block or the
#                     directory_key and file_name are either missing or set to
#                     a dash ("-") then the display will be the one embedded
#                     in the image itself (like GIF).
#
#  IMAGE BLOCK
#
#  A particular image is identified by an "image_tag" and a valid time.
#  This file provides other necessary information for processing the image,
#  such as its location and filename, as well as geo-referencing information.
#
#  Note that the order of the images in the configuration file will determine
#  the display order. The first image will be displayed on top of the set of
#  images. The second will be displayed "underneath" the first and on top of
#  the third and so on.
#
#  Format:
#
#  image <image_tag>
#  {
#     key_word = <item list>
#     key_word = <item list>
#     ...
#  }
#
#  Key words are:
#
#      site or label - the name of a radar site (eg. "King") or a label for a
#                      satellite that the image comes from (eg. "GOES West")
#
#      product_tag - the product group to which this image belongs. See
#                    product_tag above.
#
#      directory   - <dir_key> <dir>
#
#                    dir_key - the base directory key name of the image
#                              directories as found in the setup file
#                    dir     - directory where the images are to be found.
#
#      fname_mask  - The mask which is used to read the list of files from
#                    the above directory. For example ............_WSO_CAPPI
#                    will return all files starting with any characters in
#                    the first 12 positions followed by the string _WSO_CAPPI
#                    (and possibly followed by other unspecified characters).
#                    Note that the mask uses regular expression matching, so
#                    that "." matches any single character, "*" matches any
#                    string of characters, the "[]" brackets can enclose a
#                    list of characters, and "$" indicates the end of the name.
#                    Thus the file 200005132130_WSO_CAPPI_RAIN.GIF would be
#                    a match for the previous example, but not for *_WSO_CAPPI$.
#                    If not specified the default is all files ("*").
#                    Note that filenames cannot be longer than 120 characters.
#
#      fname_time  - The parsing format for the time contained in the file
#                    name in the form of <format> <parse keys>. <format> is the
#                    way to parse the string in standard c sscanf style notation
#                    and <parse keys> give the meaning of each of the elements
#                    parsed. In the above example the file starts with the
#                    date, so the entry %4d%2d%2d%2d%2d YYYY MM DD hh mm
#                    will parse it. If there was a string in front of the
#                    date this would need to be included in the format string.
#                    For example if we had RT............_WSO_CAPPI then the
#                    format would be RT%4d%2d%2d%2d%2d YYYY MM DD hh mm
#
#                    The default is "%4d%2d%2d%2d%2d YYYY MM DD hh mm"
#
#                    The recognized parse keys are:
#
#                    YYYY - 4 digit year
#                    YY   - 2 digit year (the last 2 digits of the year)
#                    JJJ  - 3 digit julian day
#                    MM   - 2 digit month
#                    DD   - 2 digit day of month
#                    hh   - 2 digit hour of the day
#                    mm   - 2 digit minute of the hour
#
#                    Note that the above are case sensitive.
#
#
#      encode      - how the image is encoded. This may be one of:
#
#                    "none"         - the image is not encoded but is a raw
#                                     raster consisting of one byte per pixel
#                                     (greyscale)
#                    "rgb"          - the image is not encoded but is a raw
#                                     raster consisting of three bytes per
#                                     pixel (colour) in the form rgbrgbrgb...
#                    "any"          - the library attempts to determine the
#                                     image format from the file extension and
#                                     the file contents.
#                    "GIF"          - stored as a GIF file
#                    "TIFF"         - Tagged Image Format File
#                    "xwd"          - X window dump format
#                    "xgl"          - the format native to this library.
#                                     See below.
#                    "gridded_data" - data is a raw grid of scaled data values
#                                     as value = pixel * scale + offset
#                                     See below.
#                    "png_gridded"  - as for gridded_data but grid is read from
#                                     a PNG encoded file.
#                    "urp_gridded"  - stored as a universal radar processor data
#                                     in gridded format.
#                    "urp_polar"    - stored as URP format in range-theta format
#
#                    Note that the above are case insensitive.
#
#
#  force_grayscale - "true" or "false" (default). If set the image is forced to
#                    grayscale. This is provided in case the image (especially
#                    satellite) had a colour label added. This would cause the
#                    entire image to be treated as a colour image, which is not
#                    usually wanted.
#
#     aspect_ratio - "adjust" or "fixed" (default). The aspect ratio of the
#                    image is allowed to change depending on the viewport
#                    setting or must remained fixed.
#
#   time_frequency - The time between images. If no time information is to be
#                    specified (or if the interval time cannot be specified,
#                    as is the case for polar orbiting satellites), then enter
#                    "none" to avoid complaints from the configuration reader.
#
#                    The time frequency information consists of four entries:
#
#                       1. the start time as an offset from 00 GMT
#                       2. the cycle time
#                       3. the time window before the expected time that
#                          an image is considered to have arrived on time
#                       4. the time window after the expected time that
#                          an image is considered to have arrived on time
#
#                    All time entries can be specfied in minutes (m) or hours
#                    and minutes in the format h:m (for example 15 or 1:10).
#
#                    The acceptance window is a time within which an image can
#                    arrive and still be considered to be on time. Some
#                    satellite images that nominally arrive on the half hour
#                    may actually arrive at times like 10:32, thus an
#                    acceptance window of 2 minutes would consider this to be
#                    the 10:30 image. Typical entries might be:
#
#                       radar     -> 0:0 10 0 0
#                       satellite -> 0:0 15 2 5
#
#                    If a satellite repeated every half hour starting on the
#                    quarter hour, plus or minus 2 minutes, the entry would be:
#
#                       15 30 2 2
#
#
#  The following are required for radar and satellite images only (like GIF) and
#  satellite raw raster data files. If projection and mapdef are specified for
#  URP or TDF files, then the enties in this file will override the information
#  in the data file header. If not used, mapdef should be specified as "none" or
#  the configuration reader will complain.
#
#      projection  - the map projection the image is in. The entries in this
#                    line will depend on the projection but a few common ones:
#
#                    radar
#                    polar_stereographic north 60N
#                    lambert_conformal 60N 20N
#                    mercator_equatorial
#                    latitude_longitude
#                    rectangular 44.6N
#
#                    Note that FPA projections and the required parameters are
#                    described in the FPA Graphics Metafile Standard.
#
#                    Single radar images are normally done in the "radar"
#                    projection (really equivalent to no projection).
#
#      mapdef      - the map definition of the image. The entries are:
#
#                    <olat> <olon> <rlon> <xmin> <ymin> <xmax> <ymax> <units>
#
#                    olat  - latitude of map "origin"
#                    olon  - longitude of map "origin"
#                    rlon  - reference longitude
#                    xmin  - start of x-axis wrt "origin" in "units"
#                    ymin  - start of y-axis wrt "origin" in "units"
#                    xmax  - end of x-axis wrt "origin" in "units"
#                    ymax  - end of y-axis wrt "origin" in "units"
#                    units - units for x and y axes, in number of metres per
#                            map unit, or in degrees per map unit for
#                            latitude_longitude projections
#
#                    Note that in radar numeric files the mapdef can be set to
#                    "none" and the appropriate map definition information will
#                    be read from the files.
#
#     mapdef_file  - Some images, such as those received from polar orbiting
#                    satellites have a map definition that changes from one
#                    image to another. This entry defines the name of the file
#                    that contains the map definition and/or projection.
#                    There are two forms the files can take:
#
#                    1. The file contains the definitions for one image and the
#                       file name identifies which image the information is for.
#                       The file name is in the form of <format> <encode keys>.
#                       <format> is the way to encode the file name in standard
#                       C sprintf style notation and <encode keys> give the
#                       meaning of each of the elements. For example:
#
#                        %2.2d%2.2d%2.2d%2.2d%2.2d_WSO_CAPPI.mdef YY MM DD hh mm
#
#                       where the time is encoded according to the rules
#                       defined above for fname_time. The file must contain the
#                       definitions in the format given in the discussion of
#                       projection and mapdef above although the equal ("=")
#                       sign is not required.
#
#                    2. The file contains the definitions and/or projections
#                       for more than one image. In this case the item list
#                       contains only one entry which is the name of the file.
#                       For example:
#
#                           mapdefs
#
#                       Each line in the given file must be in the form of:
#
#                           image_file_name key <paramters>
#
#                       where image_file_name is of course the name of the
#                       image file, key is one of "mapdef" or "projection", and
#                       the parameters are as described in the discussion above.
#
#                    The files are assumed to be in the same directory as the
#                    images.
#
#                    Note that the map definition and projection must still be
#                    specified in this file for use as the default if the file
#                    is not found or if only the map definition is specified in
#                    the file.
#
#
#  Key words for radar image files only (like GIF):
#
#      radar_overlay  - if the image has the geography in specific planes in the
#                       image this can be used to remove them. Entries are
#
#                       <flag> <mask>
#
#                       flag - either "on" or "off"
#                       mask - the 8-bit mask indicating which bits in the image
#                              are to be used or rejected. For example: 00111111
#
#      radar_bgnd     - do we want the image background to be transparent or
#                       opaque? Values are "transparent" or "opaque".
#
#      radar_bg_color - the rgb (red, green, blue) values of the colour to be
#                       taken as transparent if radar_bgnd is set to
#                       "transparent". The values must range from 0 to 255 and
#                       the default is black (radar_bg_color = 0 0 0).
#
#      radar_extent   - display the entire image or just the part where the
#                       radar scan is? Entries are "data" or "full"
#
#      radar_centre   - where in the image the center of the radar scan can be
#                       found. Entries are <width> and <height> in pixels.
#
#      radar_diameter - the diameter of the radar scan part of the image in
#                       pixels.
#
#      range_rings    - Either "true" or "false". If true the library is
#                       allowed to overlay range rings on the image. Many radar
#                       images have range rings already in the image so normally
#                       this key word is either left out or set to "false".
#
#
#  Key words for satellite with encode key "gridded_data" only:
#
#      element         - the name of the element encoded into the grid
#                        (eg. Temperature)
#
#      size            - the size of the image grid. Entries are <width> and
#                        <height> in pixels.
#
#      bytes_per_pixel - the number of bytes (8-bit chunks) per pixel (must be
#                        either 1, 2 or 3)
#
#      byte_order      - The endian order of the image pixels. Either MSBFirst
#                        for Most Significant Byte First or LSBFirst for Least
#                        Significant Byte First. If not specified the default
#                        is MSBFirst. Only required for bytes_per_pixel > 1.
#
#      scale           - both scale and offset are used to turn the pixels
#      offset            into the values represented by the pixels, and are
#                        applied as:
#
#                           pixel * scale + offset
#
#                        For example if cloud top temperature was encoded as
#                        degrees Kelvin * 100 and we wanted degrees Celsius,
#                        then the scale and offset values would be:
#
#                         scale  = .01
#                         offset = -273.15
#
#
#  Key words for satellite with encode key "png_gridded" only:
#
#      element - the name of the element encoded into the grid, for example
#                (Cloud Top Temperature).
#
#
#  Key words for encode key "none" only:
#
#      size - the image dimensions. Entries are <width> <height> in pixels.
#
#
#  XGL image file format:
#
#  This is the native format of this library. It is a very simple uncompressed
#  raster format and consists of a 24 byte header block followed by the image
#  data. The file starts with "xglraster". This is followed by a byte that is
#  the type of image storage. The options are 'G','R','P' and mean:
#
#     'G' = 1 byte per pixel (grayscale)
#     'R' = 3 bytes per pixel stored as RGB triplets: RGBRGBRGB...
#     'P' = 3 bytes per pixel stored as RGB in plane order: RRRR...GGGG...BBBB
#
#  This is followed by a 14 byte block that holds the image size stored as
#  width x height. Note that the number of bytes in the image will be
#  width * height * bytes-per-pixel.
#  Thus the file size (bytes) will be: 24 + width * height * bytes-per-pixel.
#
#  Header example: "xglrasterR1024x768      "
#
#
################################################################################

revision 6.0
